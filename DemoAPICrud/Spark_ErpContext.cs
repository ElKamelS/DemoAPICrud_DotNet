// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;

namespace DemoAPICrud
{
    public partial class Spark_ErpContext : DbContext
    {
        public Spark_ErpContext()
        {
        }

        public Spark_ErpContext(DbContextOptions<Spark_ErpContext> options)
            : base(options)
        {
        }

        public virtual DbSet<Facture> Factures { get; set; }

        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            if (!optionsBuilder.IsConfigured)
            {
#warning To protect potentially sensitive information in your connection string, you should move it out of source code. See http://go.microsoft.com/fwlink/?LinkId=723263 for guidance on storing connection strings.
                optionsBuilder.UseSqlServer("Data Source=EL-KAMEL;Initial Catalog=spark_erp;Integrated Security=True");
            }
        }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.HasAnnotation("ProductVersion", "2.2.0-rtm-35687");

            modelBuilder.Entity<Facture>(entity =>
            {
                entity.ToTable("Facture");

                entity.Property(e => e.Montant).HasColumnName("montant");

                entity.Property(e => e.Objet)
                    .HasColumnName("objet")
                    .HasMaxLength(50);

                entity.Property(e => e.Receiver)
                    .HasColumnName("receiver")
                    .HasMaxLength(50);

                entity.Property(e => e.Reference)
                    .HasColumnName("reference")
                    .HasMaxLength(50);

                entity.Property(e => e.Sender)
                    .HasColumnName("sender")
                    .HasMaxLength(50);

                entity.Property(e => e.Type)
                    .HasColumnName("type")
                    .HasMaxLength(50);
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}